# -*- coding: utf-8 -*-
"""pandas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UF8jb-eQ5jIK2hR-HRBO5VmOJUOpjPPt

#Series
"""

from pandas import Series, DataFrame
import pandas as pd

obj = Series([4, 7, -5, 3])
print(obj)
print(obj.index)
print(obj.values)

"""## referecing elements"""

obj2 = Series([4, 7, -5, 3], index=['d', 'b', 'c', 'a'])
print(obj2)

print(obj2.index)

print(obj2.values)

print(obj2['a'])

obj2['d'] = 10
print(obj2[['d','c','a']])

print(obj2[:2])

print(obj2.a)

"""## array/dict operations"""

obj3=Series({'d': 4, 'b': 7, 'a': -5, 'c': 3})
print(obj3)

"""##numpy array operation"""

obj4=obj3[obj3>0]
print(obj4)

print(obj3**2)

print('b' in obj3)

"""## from dictionary"""

sdata = {'HCM': 10, 'HN': 20, 'HP': 15, 'DN': 18 }
cities = ['HCM', 'HN', 'HP', 'CT']
obj4 = Series(sdata, index=cities)
print(obj4)

print(pd.isnull(obj4))

print(pd.notnull(obj4))

print(obj4[pd.notnull(obj4)])

"""## auto alignment"""

sdata = {'HCM': 10, 'HN': 20, 'HP': 15, 'DN': 18 }
cities = ['HCM', 'HN', 'HP', 'CT']
obj4 = Series(sdata, index=cities)
print(obj4)

sdata = {'HCM': 10, 'HN': 20, 'HP': 15, 'DN': 18 }
cities = ['HCM', 'HN', 'HP', 'DN']
obj5 = Series(sdata, index=cities)
print(obj5)

print(obj4.add(obj5))

"""## Series name and index name"""

sdata = {'HCM': 10, 'HN': 20, 'HP': 15, 'DN': 18 }
cities = ['HCM', 'HN', 'HP', 'CT']
obj4 = Series(sdata, index=cities)
obj4.name = 'population'
obj4.index.name = 'cities'
print(obj4)

obj4.index = ['NT', 'DL', 'HG', 'Hue']
print(obj4)

print(obj4.index)

"""## Indexing, selection and filtering"""

S = Series(range(4), index=['zero', 'one', 'two', 'three'])
print(S['two'])

print(S[['zero', 'two']])

print(S[2])

print(S[[0,2]])

S = Series(range(4), index=['zero', 'one', 'two', 'three'])
print(S[:2])

print(S['zero': 'two'])

print(S[S > 1])

print(S[-2:])

"""# Activity 1"""

import random

random_numbers = random.sample(range(1, 100), 10)

print(random_numbers)

import random

random_numbers = random.sample(range(1, 100), 10)

series = pd.Series(random_numbers, index=range(1, 11))

series.name = 'Random Numbers'
series.index.name = 'idx'

print(series)

"""# DataFrame"""

data = {'cities': ['HN', 'HN', 'HN', 'HP', 'HP'],
'year': [2000, 2001, 2002, 2001, 2002],
'pop': [1.5, 1.7, 3.6, 2.4, 2.9]}
frame = DataFrame(data)
print(frame)

frame2 = DataFrame(data, columns=['year', 'cities', 'pop', 'debt'], index=['A', 'B', 'C', 'D', 'E'])
print(frame2)

pop = {'HN': {2001: 2.9, 2002: 2.9}, 'HP': {2002: 3.6, 2001: 1.7, 2000: 1.5}}
frame3 = DataFrame(pop)
print(frame3)

frame3.index.name = 'year'
frame3.columns.name='cities'
print(frame3)

print(frame3.index)

print(frame3.columns)

"""## DataFrame - retrieving a column"""

data = {'cities': ['HN', 'HN', 'HN', 'HP', 'HP'],
'year': [2000, 2001, 2002, 2001, 2002],
'pop': [1.5, 1.7, 3.6, 2.4, 2.9]}
frame = DataFrame(data)

print(frame['cities'])

print(frame.cities)

"""## Activity"""

import pandas as pd

url = "https://www.cs.odu.edu/~sampath/courses/f19/cs620/files/data/values.csv"
df = pd.read_csv(url)
print(df.head())

average_factor_1 = df['factor_1'].mean()
std_factor_1 = df['factor_1'].std()
print("Average of factor_1:", average_factor_1)
print("Standard deviation of factor_1:", std_factor_1)

"""## DataFrame - getting rows"""

data = {'cities': ['HN', 'HN', 'HN', 'HP', 'HP'],
'year': [2000, 2001, 2002, 2001, 2002],
'pop': [1.5, 1.7, 3.6, 2.4, 2.9]}
frame2 = DataFrame(data, columns=['year', 'cities', 'pop', 'debt'], index=['A', 'B', 'C', 'D', 'E'])
print(frame2)

print(frame2.loc['A'])

print(frame2.loc[['A', 'B']])

print(frame2.loc['A':'E',['cities','pop']])

print(frame2.iloc[1:3])

print(frame2.iloc[:,1:3])

frame2['debt'] = 0
print(frame2)

frame2['debt'] = range(5)

val = Series([10, 10, 10], index = ['A', 'C', 'D'])
frame2['debt'] = val
print(frame2)

"""## DataFrame - removing columns"""

del frame2['debt']
print(frame2)

"""## More on DataFrame indexing"""

import numpy as np
data = np.arange(9).reshape(3,3)
print(data)

frame = DataFrame(data, index=['r1', 'r2', 'r3'], columns=['c1', 'c2', 'c3'])
print(frame)

print(frame['c1'])

print(frame.loc['r1'])

print(frame['c1']['r1'])

print(frame.loc[['r1', 'r3']])

print(frame.iloc[:2])

print(frame[:2])

"""##Activity"""

import numpy as np
random_array = np.random.randint(1, 101, (3, 5))
print(random_array)

import math

random_array = np.random.randint(1, 101, (3, 5))

print("Original Array:")
print(random_array)

sqrt_array = np.vectorize(lambda x: math.sqrt(x))(random_array)

print("\nArray with Square Roots:")
print(sqrt_array)

"""# Other DataFrame functions"""

data = {'A': [1, 2, 3, None], 'B': [4, 5, 6, 7]}
df = pd.DataFrame(data)

column_means = df.mean()

print("Giá trị trung bình của từng cột:")
print(column_means)

overall_mean = df.mean().mean()

print("\nGiá trị trung bình của toàn bộ DataFrame:", overall_mean)

import pandas as pd
import numpy as np

data = {'A': [1, 2, 3, np.nan], 'B': [4, np.nan, 6, 7], 'C': [8, 9, 10, 11]}
df = pd.DataFrame(data)

mean_by_column = df.mean(axis=0)

mean_by_row = df.mean(axis=1)

mean_by_column_with_nan = df.mean(axis=0, skipna=False)

print("Trung bình theo cột (bỏ qua NaN):")
print(mean_by_column)
print("\nTrung bình theo hàng (bỏ qua NaN):")
print(mean_by_row)
print("\nTrung bình theo cột (không bỏ qua NaN):")
print(mean_by_column_with_nan)

import pandas as pd
import numpy as np

data = {'A': [1, 2, 3, np.nan], 'B': [4, np.nan, 6, 7], 'C': [8, 9, 10, 11]}
df = pd.DataFrame(data)

sum_by_column = df.sum(axis=0)

sum_by_row = df.sum(axis=1)

sum_by_column_with_nan = df.sum(axis=0, skipna=False)

# Hiển thị kết quả
print("Tổng theo cột (bỏ qua NaN):")
print(sum_by_column)
print("\nTổng theo hàng (bỏ qua NaN):")
print(sum_by_row)
print("\nTổng theo cột (không bỏ qua NaN):")
print(sum_by_column_with_nan)

import pandas as pd

data = {'A': [1, 2, 3, 4], 'B': [5, 6, 7, 8]}
df = pd.DataFrame(data)

cumsum_by_column = df.cumsum(axis=0)

cumsum_by_row = df.cumsum(axis=1)

print("Tổng tích lũy theo cột:")
print(cumsum_by_column)
print("\nTổng tích lũy theo hàng:")
print(cumsum_by_row)

import pandas as pd

data = {'A': [1, 2, 3, 4], 'B': [5, 6, 7, 8], 'C': ['x', 'y', 'z', 'w']}
df = pd.DataFrame(data)

summary = df.describe()

print(summary)

import pandas as pd

data = {'A': [1, 2, 3, 4], 'B': [5, 6, 7, 8], 'C': [2, 1, 4, 3]}
df = pd.DataFrame(data)

correlation_matrix = df.corr()

print("Ma trận tương quan:")
print(correlation_matrix)

"""Ma trận tương quan là một ma trận vuông, trong đó mỗi hàng và cột đại diện cho một cột số trong DataFrame.
Giá trị trên đường chéo chính luôn bằng 1, vì mỗi cột hoàn toàn tương quan với chính nó.
Các giá trị khác trong ma trận biểu thị hệ số tương quan Pearson giữa các cặp cột.
Hệ số tương quan nằm trong khoảng từ -1 đến 1:
1: Tương quan dương hoàn hảo (các cột tăng hoặc giảm cùng nhau)
-1: Tương quan âm hoàn hảo (một cột tăng khi cột kia giảm, và ngược lại)
0: Không có tương quan tuyến tính
"""

import pandas as pd

data1 = {'A': [1, 2, 3, 4], 'B': [5, 6, 7, 8], 'C': [2, 1, 4, 3]}
df1 = pd.DataFrame(data1)

data2 = {'A': [5, 3, 1, 2], 'B': [8, 7, 6, 5], 'D': [1, 3, 2, 4]}  # Chú ý có cột 'D' không có trong df1
df2 = pd.DataFrame(data2)

correlation_by_column = df1.corrwith(df2)

correlation_by_row = df1.corrwith(df2, axis=1)

print("Tương quan theo cột:")
print(correlation_by_column)
print("\nTương quan theo hàng:")
print(correlation_by_row)